// Test vectors for the tests
// fnv1a, keccak_f800_progpow, kiss99, fill_mix, merge, math, progPowInit and progPowHash
// are taken from:
// https://github.com/ifdefelse/ProgPOW/blob/master/test-vectors.md
//
import org.scalatest.FunSuite
import java.lang.Long

class ProgPowTest extends FunSuite {

  val testMode = DagMode.Light // DagMode.Full

  test("popcount") {
    assert(ProgPow.popcount(0x00000000L) == 0L)
    assert(ProgPow.popcount(0x00000001L) == 1L)
    assert(ProgPow.popcount(0x00000002L) == 1L)
    assert(ProgPow.popcount(0x00000003L) == 2L)
    assert(ProgPow.popcount(0x00000004L) == 1L)
    assert(ProgPow.popcount(0x00000005L) == 2L)
    assert(ProgPow.popcount(0x00000006L) == 2L)
    assert(ProgPow.popcount(0x00000007L) == 3L)
    assert(ProgPow.popcount(0x000000FFL) == 8L)
    assert(ProgPow.popcount(0x0000FFFFL) == 16L)
    assert(ProgPow.popcount(0xFFFFFFFFL) == 32L)
  }

  test("clz") {
    assert(ProgPow.clz32(0x00000000L) == 32L)
    assert(ProgPow.clz32(0x00000001L) == 31L)
    assert(ProgPow.clz32(0x000000FFL) == 24L)
    assert(ProgPow.clz32(0x0000FFFFL) == 16L)
    assert(ProgPow.clz32(0xFFFFFFFFL) == 0L)
  }

  test("bswap"){
    assert(ProgPow.bswap32(0xAABBCCDDL) == 0xDDCCBBAAL)
    assert(ProgPow.bswap32(0x12345678L) == 0x78563412L)
  }

  test("mul_hi"){
    assert(ProgPow.mul_hi32(0x00000000L, 0x00000000L) == 0x00000000L)
    assert(ProgPow.mul_hi32(0x12345678L, 0x12345678L) == 0x014B66DCL)
    assert(ProgPow.mul_hi32(0x00ABCDEFL, 0xFFDDBB98L) == 0x00ABB6EFL)
    assert(ProgPow.mul_hi32(0x7FFFFFFFL, 0x7FFFFFFFL) == 0x3FFFFFFFL)
    assert(ProgPow.mul_hi32(0xFFFFFFFFL, 0xFFFFFFFFL) == 0xFFFFFFFEL)
  }

  test("mul"){
    assert(ProgPow.mul32(0x00000000L, 0x00000000L) == 0x00000000L)
    assert(ProgPow.mul32(0x12345678L, 0x12345678L) == 0x1DF4D840L)
    assert(ProgPow.mul32(0x00ABCDEFL, 0xFFDDBB98L) == 0xBDC2DAE8L)
    assert(ProgPow.mul32(0x7FFFFFFFL, 0x7FFFFFFFL) == 0x00000001L)
    assert(ProgPow.mul32(0xFFFFFFFFL, 0xFFFFFFFFL) == 0x00000001L)
  }

  test("min"){
    assert(ProgPow.min(0xABCDEF01L, 0xABCDEF00L) == 0xABCDEF00L)
    assert(ProgPow.min(0xABCDEF00L, 0xABCDEF01L) == 0xABCDEF00L)
    assert(ProgPow.min(0x12345678L, 0x12345678L) == 0x12345678L)
  }

  test("max"){
    assert(ProgPow.max(0xABCDEF01L, 0xABCDEF00L) == 0xABCDEF01L)
    assert(ProgPow.max(0xABCDEF00L, 0xABCDEF01L) == 0xABCDEF01L)
    assert(ProgPow.max(0x12345678L, 0x12345678L) == 0x12345678L)
  }

  test("rotl32"){
    assert(ProgPow.rotl32(0xAAAABBBBL, 0L)  == 0xAAAABBBBL)
    assert(ProgPow.rotl32(0xAAAABBBBL, 4L)  == 0xAAABBBBAL)
    assert(ProgPow.rotl32(0xAAAABBBBL, 8L)  == 0xAABBBBAAL)
    assert(ProgPow.rotl32(0xAAAABBBBL, 16L) == 0xBBBBAAAAL)
    assert(ProgPow.rotl32(0xAAAABBBBL, 24L) == 0xBBAAAABBL)
    assert(ProgPow.rotl32(0xAAAABBBBL, 32L) == 0xAAAABBBBL)
    assert(ProgPow.rotl32(0xAAAABBBBL, 56L) == 0xBBAAAABBL)
  }

  test("rotr32"){
    assert(ProgPow.rotr32(0xAAAABBBBL, 0L)  == 0xAAAABBBBL)
    assert(ProgPow.rotr32(0xAAAABBBBL, 4L)  == 0xBAAAABBBL)
    assert(ProgPow.rotr32(0xAAAABBBBL, 8L)  == 0xBBAAAABBL)
    assert(ProgPow.rotr32(0xAAAABBBBL, 16L) == 0xBBBBAAAAL)
    assert(ProgPow.rotr32(0xAAAABBBBL, 24L) == 0xAABBBBAAL)
    assert(ProgPow.rotr32(0xAAAABBBBL, 32L) == 0xAAAABBBBL)
    assert(ProgPow.rotr32(0xAAAABBBBL, 56L) == 0xAABBBBAAL)
  }

  test("fnv1a"){
    assert(ProgPow.fnv1a(0X811C9DC5L, 0XDDD0A47BL) == 0XD37EE61AL)
    assert(ProgPow.fnv1a(0XD37EE61AL, 0XEE304846L) == 0XDEDC7AD4L)
    assert(ProgPow.fnv1a(0XDEDC7AD4L, 0X00000000L) == 0XA9155BBCL)
  }

  test("keccak_f800_round"){
    val st_sample = Array[Long](0xD1BE8551L, 0x44C0CB95L, 0x3850FEE7L, 0x4E2C7497L, 0xDE921892L, 0xE58ADB02L, 0x468FE98BL, 0x910FBD71L, 0xCB99C34FL, 0xBF85E015L, 0x906A9DFAL, 0x5516A41CL, 0xD9A7074EL, 0xFA45A31L, 0x18FACC8FL, 0x126F2299L, 0xFEACE886L, 0xD8FD2801L, 0xAA42E6B3L, 0xF7BD889DL, 0x175D6B40L, 0x1D3CBB8BL, 0x41FFB5D2L, 0x35CC06A2L, 0x3A8B781EL)
    val st = Array.fill[Long](25)(0L)

    for (r <- 0 until 24)
      ProgPow.keccak_f800_round(st, r)

    assert(st_sample.sameElements(st))
  }

  test("keccak_f800_progpow"){
    val hash0_uint32s_sample = Array[Long](0x464830EEL, 0x7BA4D0DDL, 0x969E1798L, 0xCEC50EB6L, 0x7872E2EAL, 0x597E3634L, 0xE380E73DL, 0x2F89D1E6L)
    val hash1_uint32s_sample = Array[Long](0x47CD7C5BL, 0xD9FDBE2DL, 0xAC5C895BL, 0xFF67CE8EL, 0x6B5AEB0DL, 0xE1C6ECD2L, 0x003D3862L, 0xCE8E72C3L)

    val hash0 = ProgPow.keccak_f800_progpow(
      Hash32(Array[Long](0xCCDDEEFFL, 0x8899AABBL, 0x44556677L, 0x00112233L, 0x33221100L, 0x77665544L, 0xBBAA9988L, 0xFFEEDDCCL)),
      Array[Long](0x9ABCDEF0L, 0x12345678L),
      Hash32()
    )

    val hash1 = ProgPow.keccak_f800_progpow(
      Hash32(Array[Long](0xCCDDEEFFL, 0x8899AABBL, 0x44556677L, 0x00112233L, 0x33221100L, 0x77665544L, 0xBBAA9988L, 0xFFEEDDCCL)),
      Array[Long](0xDDD0A47BL, 0xEE304846L),
      Hash32(Array[Long](0x0598F111L, 0x66B48AC5L, 0x719CFF10L, 0x5F0ACF9DL, 0x162FFA18L, 0xEF8E7905L, 0x21470C77L, 0x7D767492L))
    )

    assert(hash0.uint32s.sameElements(hash0_uint32s_sample))
    assert(hash1.uint32s.sameElements(hash1_uint32s_sample))
  }

  test("kiss99") {
    val generator = Kiss99(362436069L, 521288629L, 123456789L, 380116160L)

    assert(generator.kiss99() == 769445856L)
    assert(generator.kiss99() == 742012328L)
    assert(generator.kiss99() == 2121196314L)
    assert(generator.kiss99() == 2805620942L)

    for(i <- 4 until 100000 - 1) generator.kiss99()

    assert(generator.kiss99() == 941074834L)
  }

  test("fill_mix") {
    val seed = Array[Long](0xDDD0A47BL, 0xEE304846L)

    val mix_0_sample = Array[Long](
      0x10C02F0DL, 0x99891C9EL, 0xC59649A0L, 0x43F0394DL,
      0x24D2BAE4L, 0xC4E89D4CL, 0x398AD25CL, 0xF5C0E467L,
      0x7A3302D6L, 0xE6245C6CL, 0x760726D3L, 0x1F322EE7L,
      0x85405811L, 0xC2F1E765L, 0xA0EB7045L, 0xDA39E821L,
      0x79FC6A48L, 0x089E401FL, 0x8488779FL, 0xD79E414FL,
      0x041A826BL, 0x313C0D79L, 0x10125A3CL, 0x3F4BDFACL,
      0xA7352F36L, 0x7E70CB54L, 0x3B0BB37DL, 0x74A3E24AL,
      0xCC37236AL, 0xA442B311L, 0x955AB27AL, 0x6D175B7EL
    )
    val mix_13_sample = Array[Long](
      0x4E46D05DL, 0x2E77E734L, 0x2C479399L, 0x70712177L,
      0xA75D7FF5L, 0xBEF18D17L, 0x8D42252EL, 0x35B4FA0EL,
      0x462C850AL, 0x2DD2B5D5L, 0x5F32B5ECL, 0xED5D9EEDL,
      0xF9E2685EL, 0x1F29DC8EL, 0xA78F098BL, 0x86A8687BL,
      0xEA7A10E7L, 0xBE732B9DL, 0x4EEBCB60L, 0x94DD7D97L,
      0x39A425E9L, 0xC0E782BFL, 0xBA7B870FL, 0x4823FF60L,
      0xF97A5A1CL, 0xB00BCAF4L, 0x02D0F8C4L, 0x28399214L,
      0xB4CCB32DL, 0x83A09132L, 0x27EA8279L, 0x3837DDA3L
    )

    val mix_0 = ProgPow.fill_mix(seed, 0L)
    val mix_13 = ProgPow.fill_mix(seed, 13L)

    assert(mix_0.sameElements(mix_0_sample))
    assert(mix_13.sameElements(mix_13_sample))
  }

  test("merge"){
    assert(ProgPow.merge(0x3B0BB37DL, 0xA0212004L, 0x9BD26AB0L) == 0x3CA34321L)
    assert(ProgPow.merge(0x10C02F0DL, 0x870FA227L, 0xD4F45515L) == 0x91C1326AL)
    assert(ProgPow.merge(0x24D2BAE4L, 0x0FFB4C9BL, 0x7FDBC2F2L) == 0x2EDDD94CL)
    assert(ProgPow.merge(0xDA39E821L, 0x089C4008L, 0x8B6CD8C3L) == 0x8A81E396L)
  }

  test("math"){
    assert(ProgPow.math(0x8626BB1FL, 0xBBDFBC4EL, 0x883E5B49L) == 0x4206776DL)
    assert(ProgPow.math(0x3F4BDFACL, 0xD79E414FL, 0x36B71236L) == 0x4C5CB214L)
    assert(ProgPow.math(0x6D175B7EL, 0xC4E89D4CL, 0x944ECABBL) == 0x53E9023FL)
    assert(ProgPow.math(0x2EDDD94CL, 0x7E70CB54L, 0x3F472A85L) == 0x2EDDD94CL)
    assert(ProgPow.math(0x61AE0E62L, 0xe0596b32L, 0x3F472A85L) == 0x61AE0E62L)
    assert(ProgPow.math(0x8A81E396L, 0x3F4BDFACL, 0xCEC46E67L) == 0x1E3968A8L)
    assert(ProgPow.math(0x8A81E396L, 0x7E70CB54L, 0xDBE71FF7L) == 0x1E3968A8L)
    assert(ProgPow.math(0xA7352F36L, 0xA0EB7045L, 0x59E7B9D8L) == 0xA0212004L)
    assert(ProgPow.math(0xC89805AFL, 0x64291E2FL, 0x1BDC84A9L) == 0xECB91FAFL)
    assert(ProgPow.math(0x760726D3L, 0x79FC6A48L, 0xC675CAC5L) == 0x0FFB4C9BL)
    assert(ProgPow.math(0x75551D43L, 0x3383BA34L, 0x2863AD31L) == 0x00000003L)
    assert(ProgPow.math(0xEA260841L, 0xE92C44B7L, 0xF83FFE7DL) == 0x0000001BL)
  }

  test("progPowInit"){
    val mix_src_sample = Array[Long](0x1AL, 0x1EL, 0x01L, 0x13L, 0x0BL, 0x15L, 0x0FL, 0x12L, 0x03L, 0x11L, 0x1FL, 0x10L, 0x1CL, 0x04L, 0x16L, 0x17L, 0x02L, 0x0DL, 0x1DL, 0x18L, 0x0AL, 0x0CL, 0x05L, 0x14L, 0x07L, 0x08L, 0x0EL, 0x1BL, 0x06L, 0x19L, 0x09L, 0x00L)
    val mix_dst_sample = Array[Long](0x00L, 0x04L, 0x1BL, 0x1AL, 0x0DL, 0x0FL, 0x11L, 0x07L, 0x0EL, 0x08L, 0x09L, 0x0CL, 0x03L, 0x0AL, 0x01L, 0x0BL, 0x06L, 0x10L, 0x1CL, 0x1FL, 0x02L, 0x13L, 0x1EL, 0x16L, 0x1DL, 0x05L, 0x18L, 0x12L, 0x19L, 0x17L, 0x15L, 0x14L)
    val generator_state_sample = Array[Long](0x6535921CL, 0x29345B16L, 0xC0DD7F78L, 0x1165D7EBL)

    val kissMix = ProgPow.progPowInit(Array[Long](600L, 0L))
    val generator_state = Array[Long](kissMix.generator.z, kissMix.generator.w, kissMix.generator.jsr, kissMix.generator.jcong)

    assert(kissMix.mix_src.sameElements(mix_src_sample))
    assert(kissMix.mix_dst.sameElements(mix_dst_sample))
    assert(generator_state.sameElements(generator_state_sample))
  }

  test("dagItem"){
    val prog_pow_0 = new ProgPow(0, testMode)

    assert(prog_pow_0.dagItem(0) == 0x2922db22L)
    assert(prog_pow_0.dagItem(15) == 0xc2ce9b00L)
    assert(prog_pow_0.dagItem(3200) == 0xc4d08c6cL)
    assert(prog_pow_0.dagItem(3215) == 0x3aa9d15f)
    assert(prog_pow_0.dagItem(32000) == 0xf5d98db5L)
    assert(prog_pow_0.dagItem(32015) == 0xc0ebbaa3L)

    val prog_pow_20 = new ProgPow(20, testMode)

    assert(prog_pow_20.dagItem(0) == 0xf6145687L)
    assert(prog_pow_20.dagItem(15) == 0x79b02af8L)
    assert(prog_pow_20.dagItem(3200) == 0xf025d6d9L)
    assert(prog_pow_20.dagItem(3215) == 0x970f8a65L)
    assert(prog_pow_20.dagItem(32000) == 0xe798177dL)
    assert(prog_pow_20.dagItem(32015) == 0x6f5be488L)
  }

  test("cacheDag"){
    // cache for zeroized mix and loop = 0
    val dagCacheSample = Array[Long](
      0xB3E35467L, 0xAE7402E3L, 0x8522A782L, 0xA2D8353BL,
      0xFF4723BDL, 0xBFBC05EEL, 0xDE6944DEL, 0xF0D2B5B8L,
      0xC74CBAD3L, 0xB100F797L, 0x5BC60BEL,  0x4F40840BL,
      0x35E47268L, 0x9CD6F993L, 0x6A0E4659L, 0xB838E46EL,
      0xB7723382L, 0xD8FEE90DL, 0x7AE1678AL, 0x5F033EDL,
      0x5E3FEA4EL, 0x599E922L,  0xEB178D66L, 0xCD32FDE8L,
      0x94145FC9L, 0xD68C32A6L, 0x8A347917L, 0xDD172551L,
      0x5D4E8C58L, 0x75A54988L, 0xE4B75E69L, 0x6B564504L,
      0x94995081L, 0xBEBB431CL, 0x962EB902L, 0x4C74BA43L,
      0x400AC16BL, 0x9FDE6E0L,  0xF17E482AL, 0x287D062FL,
      0xEA94FC40L, 0x178ECB6AL, 0x597E803L,  0xDAC17A5EL,
      0x990850E4L, 0x907783D8L, 0xC3CD76E1L, 0xECFC2F78L,
      0x3B991873L, 0x808B7AAAL, 0xFF14FAF1L, 0x17ED5B8FL,
      0xCF36691FL, 0xA4483865L, 0x537B0676L, 0xDB3ACB23L,
      0xE15CE6CAL, 0xE8D3A43DL, 0xFDF3E1A1L, 0x1B781855L,
      0x840CD026L, 0xD129E91DL, 0xF52371B9L, 0x84D68CL
    )
    // cache for mix generated on seed = 0xFD5873285FEC678B and loop = 24
    val dagCacheSample1 = Array[Long](
      0xF7650E2EL, 0x7980B44CL, 0xE40659FBL, 0x3A43D4F7L,
      0xCDFD9E7EL, 0x481E56B5L, 0x7FE7646DL, 0xF3FCBC7FL,
      0xD47ABA2DL, 0x22132B8EL, 0xD847806EL, 0x7E4E3388L,
      0x16DD1DABL, 0xEB5DD259L, 0xC46321CEL, 0xBACE5634L,
      0xE62E8DD0L, 0xC66BEB28L, 0x2ACECEADL, 0xE2CE04B3L,
      0xD04D8F88L, 0x8F86DE2AL, 0x7CE2125L,  0x601986E0L,
      0xF8DDBAE7L, 0xD5FE80DBL, 0x5B8CCE0FL, 0x539CD7B8L,
      0xEEA7FBD0L, 0x32AB7C03L, 0xC9493BCAL, 0xDC6511EAL,
      0x14DEA731L, 0x1687841BL, 0x211F440AL, 0x6B3F83FEL,
      0xB61F5BB5L, 0xE0797DFL,  0x6BA98DB9L, 0x9C64CFA7L,
      0x9779E1ACL, 0x4C4CB9A7L, 0x3DDC2D58L, 0x4850DA3CL,
      0x5B8E294EL, 0x9078DF93L, 0xE3D7D93DL, 0x66297C8DL,
      0xB84542FBL, 0x821D0B34L, 0xF8FD446L,  0x9DD9977L,
      0xA5BAC27CL, 0xA38AD367L, 0x20F75255L, 0xC06E3AD1L,
      0x257757EL,  0xC5D93C0AL, 0x11C2A180L, 0x7D23ACC9L,
      0x6BAFB2D5L, 0x903ACC83L, 0x919B1688L, 0x678A8A38L
    )

    val prog_pow_1 = new ProgPow(1, DagMode.Light)

    val mix_0 = Array.fill(ProgPow.Lanes)(Array.fill[Long](ProgPow.Regs)(0L))
    val dagCache = prog_pow_1.cacheDag(0L, mix_0)

    assert(dagCache.flatten.sameElements(dagCacheSample))

    val seed = Array[Long](0x5FEC678BL, 0xFD587328L) // 0xFD5873285FEC678B
    val mix = (for (lane_id <- 0 until ProgPow.Lanes) yield {
      ProgPow.fill_mix(seed, lane_id.toLong)
    }).toArray
    val dagCache1 = prog_pow_1.cacheDag(24L, mix)

    assert(dagCache1.flatten.sameElements(dagCacheSample1))
  }

  test("loop"){
    // final mix after CntDag loops for seed = 0 and initially zeroized mix
    val mix_sample_0 = Array[Long](
      0xD17DAE5AL, 0x5D7BBB6FL, 0xBFCC4DDDL, 0x311BE4F2L, 0xF3BE0497L, 0x1ADAD2B6L, 0xA7348EEBL, 0x7D0ECF8BL, 0x3FEAFC92L, 0xC5223DCDL, 0xCA2809DAL, 0xACD03CEFL, 0x7B7EEC4CL, 0x18BB7D9AL, 0x4904FA92L, 0x84F6A82DL, 0xF3183B1L,  0xC59BE8CEL, 0x28054F74L, 0x18E949FEL, 0x5EF2B063L, 0x8CAABE43L, 0x57140470L, 0x286BD6BBL, 0x90A4E882L, 0xE7CD91CEL, 0x29FD60A5L, 0x7CA595C0L, 0x98E7D571L, 0xAF962801L, 0xD6D66841L, 0x23FC42B0L,
      0x2E19C4FAL, 0x4E81FDA0L, 0xCC6E1F29L, 0x73DF209EL, 0x6DAAEC10L, 0xA3979A74L, 0x32812D41L, 0x759EFA66L, 0x68877AFEL, 0x584F6E59L, 0x6505F5AEL, 0x5C1501D8L, 0x1D47D36BL, 0xF038F83CL, 0x8A8BC31DL, 0x6654CA01L, 0x6F7D75C4L, 0xD388FE2DL, 0xCC475D83L, 0x8D9BCB17L, 0x9D4B433AL, 0xEFB04D5DL, 0x6572C332L, 0x597B5A58L, 0xF44094C4L, 0x889D8360L, 0x1F656E84L, 0x2C6E10E4L, 0x2EBAEBC6L, 0xB623B324L, 0xAA56580EL, 0xCFB9E0B6L,
      0xD2DCF766L, 0x8A18128DL, 0xAB004A9AL, 0x82292E18L, 0x156C8E82L, 0xA62E5D3L,  0xC3014476L, 0x69B30CD6L, 0xFB7E66C2L, 0x252D8F88L, 0xF46A1FADL, 0xF2D4412FL, 0x2718920L,  0xF44C5094L, 0x3D80AB97L, 0xAA106161L, 0x1528C0F8L, 0x114F4390L, 0x251B4488L, 0xFAC88DE7L, 0xA64832C7L, 0xE0613D23L, 0x454367EDL, 0x7DB3BA35L, 0x6356DD9CL, 0x7B8ED5EL,  0x6FB450C8L, 0x3F7C6A6CL, 0x6390CEB4L, 0xCEC3539CL, 0x387B2182L, 0x904EEDDAL,
      0xE377B26L,  0xBC6073D2L, 0xF947120EL, 0x8A669F91L, 0xE1CF25B0L, 0xAB8F5A3DL, 0x8774DF31L, 0x416767F6L, 0x2157E37AL, 0xB52FB830L, 0x5958CD06L, 0x9ABA335AL, 0x3936E729L, 0xED8BFCB7L, 0xF1C12314L, 0x69669EA8L, 0x4C35ED7CL, 0xE23AE471L, 0x28333FCAL, 0x458BBBD6L, 0xFEF4E674L, 0x51854A37L, 0x21B6A31L,  0x2595924L,  0xFAE99B8L,  0xA90C70B2L, 0xC557144EL, 0x7CFA04DL,  0xDFD551BL,  0xC74A61C1L, 0x44BEAF39L, 0x8A20768DL,
      0xEF9C6AF1L, 0xB48C2F69L, 0x835619B8L, 0x4FD744DBL, 0xB06D84A4L, 0xE4D50DF6L, 0x98A4E159L, 0xB8038ACL,  0xF618A168L, 0xC68684BAL, 0xF2B56A91L, 0x4DE2996L,  0xA2727B41L, 0x14D54467L, 0x875981FEL, 0xC3678785L, 0xEEC5984AL, 0xF1228A54L, 0x60389F0DL, 0xE2C9805FL, 0xE196E8F2L, 0x8C6EE30BL, 0x261003A4L, 0x7B06A834L, 0x4F1E794EL, 0xCCC02EFAL, 0xEDC5964CL, 0x79719FA3L, 0x5494ECD0L, 0x7E400F9CL, 0xF24137ADL, 0x13FCBC9CL,
      0xCC775083L, 0xE6A459BL,  0x49FC8A87L, 0x60CEC63FL, 0x6DF76740L, 0xC0CFDEC2L, 0xD22D0A07L, 0x66D1AAEAL, 0x85ECBD5BL, 0x2075CA38L, 0x206E710FL, 0x8AC8274L,  0xBD00A642L, 0xFA65CAE3L, 0xBE1A3484L, 0xCC689F1CL, 0x8A6FE482L, 0xFE98DC75L, 0xF7A2E34EL, 0x780124D2L, 0x2D4B5CE7L, 0x1D5B9E8BL, 0x115704B2L, 0x895F713FL, 0x3CE19039L, 0x54C6BCC3L, 0x62A542DFL, 0x81D3571BL, 0x50205E68L, 0xD82A1C0BL, 0xD03B8651L, 0xD0B4D404L,
      0x570624EL,  0xB6304BE1L, 0xB0924FECL, 0xA465AFECL, 0xD06C15CEL, 0x18D7DBCBL, 0xA693D26EL, 0x984CDED7L, 0x1DE9DEDDL, 0xEF532043L, 0x35EB9372L, 0x800E9EAL,  0xC96844FDL, 0xD1601E15L, 0xB7A0644L,  0xE1FFB8E8L, 0x5A1EAD37L, 0xDBDAD20L,  0xCCB96989L, 0x4BD999E9L, 0x872F92F9L, 0x9576703L,  0xC3462404L, 0x93BEA500L, 0xD4662AAL,  0xDB1E56D8L, 0xD8863632L, 0x1467BE45L, 0x65D0C9CBL, 0xCEB8F7EL,  0x7C2B7026L, 0x23877CB4L,
      0x2A5DFE6AL, 0xF00A0C8DL, 0xB7C5F98L,  0x1E79BFABL, 0x1BD7A85DL, 0x50EF70DEL, 0xDD210EDDL, 0xD66C1F9DL, 0xA72E2BF5L, 0x514B4822L, 0x420A5F6FL, 0x5271284DL, 0xE750C4F6L, 0x2848AD34L, 0xA69CC6D5L, 0x3919575DL, 0xBBF90A60L, 0xE204D212L, 0x847BEB49L, 0x74951C3L,  0xB7D7143EL, 0x58F9188AL, 0x15905351L, 0xB5DA7AFBL, 0xDFADCA1CL, 0x2FA63D64L, 0x6BD14741L, 0xBB4AB39L,  0x5A2478B8L, 0xAC9384F3L, 0x71300BE9L, 0x4C60CE6CL,
      0x58303DB8L, 0xCB1E5L,    0xF6AD7AF8L, 0xD38C381BL, 0x16CFE5EAL, 0xC3C6E1D7L, 0x9EE6B12EL, 0xC9058DBCL, 0xC8AC50B5L, 0xA125F3D6L, 0x76DB53B0L, 0x18F27C09L, 0xBAC10C2EL, 0x49BB6A56L, 0xAAB2FABAL, 0xC08B160BL, 0x22B6137AL, 0x343BFBB4L, 0x7272739EL, 0x7F8B1B67L, 0x215F9560L, 0x211B72FL,  0x23A7700L,  0x497F79B1L, 0xC1C108E0L, 0xE602AAA0L, 0xA8DABFA4L, 0xA1BC3192L, 0x930819B1L, 0x5C1E2F4BL, 0xB4DDF529L, 0x9283D244L,
      0x456AD2A3L, 0x527F5ECDL, 0x7A137D6AL, 0xE6A0A12FL, 0xFDB129E3L, 0xCB3D2692L, 0x1B86F9BAL, 0xD0D1D587L, 0x7FC87F56L, 0xF5E6C7A0L, 0xF316B327L, 0xC1E73E25L, 0x1E24FE52L, 0x7F007156L, 0xC01AA71EL, 0xF37A5AE8L, 0x6044DEE4L, 0xC1302B97L, 0x76AD2C31L, 0x33343427L, 0x7F187967L, 0xE34D590AL, 0x70660534L, 0xAFD07D70L, 0x2BB5DA37L, 0x87EB620CL, 0x7AF19A39L, 0xECAB720L,  0x35DA9709L, 0x2BB65141L, 0xC26DE946L, 0x6A281ED5L,
      0x88A64E68L, 0xEE413E7CL, 0xBCFC3D6CL, 0xC40BD644L, 0x8BB94CEAL, 0xFCA94DC9L, 0x2C46DB67L, 0xFE15C04DL, 0x9D4310B7L, 0x3D2CE3CCL, 0x37536E5EL, 0xDAC76E87L, 0xF501615EL, 0xE793D699L, 0xA98A8033L, 0x76ADE509L, 0x2605B48FL, 0xAE5A463CL, 0x952BEAE2L, 0x30EB5681L, 0xF0EDF2B4L, 0x4CE33094L, 0x1E547622L, 0x47210588L, 0x49F8743DL, 0x8AC6722BL, 0x481B1464L, 0xD52300DBL, 0xD862F00BL, 0x9C71FDE5L, 0xB8AA85C6L, 0x275510C5L,
      0xC2F97BEEL, 0xB3F132AAL, 0x1E3F1414L, 0xA14ED3ECL, 0xD446EF2DL, 0xF66C6961L, 0x16F7164DL, 0xDFCFE6EL,  0xA1CA4B68L, 0xECCF750FL, 0x58AC953L,  0xE00387CEL, 0x30C5EEA1L, 0x83DFDD44L, 0x17080972L, 0x5B3215B3L, 0x8E09A3FFL, 0xADA6754AL, 0x7C93A237L, 0xC2036B05L, 0xD3221896L, 0x2CBFDBBFL, 0xD7000017L, 0xE941483CL, 0x657DB92L,  0x74DDA6D7L, 0x1996507AL, 0xEC34FC98L, 0x8181E300L, 0x1F20F285L, 0x9188428BL, 0x65F72DD5L,
      0xC3EEBC31L, 0x31DD54BEL, 0xD15AB650L, 0x8671CAADL, 0x422EF18DL, 0xDC05AE42L, 0xBABAF1E5L, 0xC7FC3004L, 0x82A2B3F6L, 0x2F9C2C6CL, 0x4D495F11L, 0x83474787L, 0xBB71A080L, 0xA5E94B85L, 0x27EC8035L, 0x65A59E4L,  0xF882BFB9L, 0xF32B1DD6L, 0x1912825L,  0xDA90A3DCL, 0xFA4DBB97L, 0x3089EEFDL, 0x16115706L, 0x84A26B61L, 0x9972B2A4L, 0x3265EF4AL, 0x666B699EL, 0xA91A3F49L, 0x3DE9CF3DL, 0x12F5F337L, 0xD1A43F38L, 0x29A0209DL,
      0xD6FA9BF3L, 0xFD56699FL, 0x1966593CL, 0x9B6AC4FCL, 0x32687F35L, 0x6E236984L, 0x65F15317L, 0xF9962730L, 0x18A7F8F1L, 0xC3B8601FL, 0x3F735DAEL, 0x4D054365L, 0x3AF002DCL, 0xD0136610L, 0x18F3DFEFL, 0x3BAFFEFDL, 0xE5C647B6L, 0x726F3419L, 0xB55004EBL, 0x65F1F193L, 0xC5C1EEC1L, 0x9E482D5DL, 0x52757263L, 0xA8E741E7L, 0xE61F3BB0L, 0x498F679DL, 0x68424882L, 0xA20C0268L, 0xD71400ACL, 0x2B89929L,  0xE3CCB422L, 0x63AF2FEBL,
      0x28F90881L, 0x7D40CE34L, 0x7AE498DAL, 0xCE2B0292L, 0xB7837A37L, 0x58DFD55AL, 0x5B582A9AL, 0x99C5EEB9L, 0x532F7D60L, 0x11E66E6CL, 0x8D02B2C0L, 0x3A9962A7L, 0x8D9711CL,  0xDA8E28E9L, 0x7DB4D3B0L, 0x8BCD585BL, 0xAE139FADL, 0x69428A1FL, 0xEA2099B1L, 0x886745DBL, 0x63D14CDL,  0xE95C072DL, 0x33C34527L, 0x22F48E40L, 0x941E9B7AL, 0xC219D6B6L, 0x1030DEFDL, 0x1F6DA95AL, 0xA20E48B5L, 0xD89A0E95L, 0xF55844FAL, 0xF55E8B86L,
      0x2A6F10A0L, 0xE5392710L, 0x2C8CE815L, 0x3857F505L, 0xCDD82BA8L, 0xD1011753L, 0x92EEFBL,   0xE75E05C4L, 0x2F288F72L, 0x2DC915DFL, 0x9BBAB797L, 0x1336BCAAL, 0x5E137A12L, 0x41A364A8L, 0xF8AD82C0L, 0x4CD66D42L, 0x333A1CF5L, 0x16B53674L, 0x6F67D189L, 0x6F8780DAL, 0x1A637B81L, 0xECA55AF5L, 0xF766073EL, 0x63B43A79L, 0xFE3AD6A7L, 0xE27C54C8L, 0xAAEDD4B6L, 0xC74E7BAEL, 0x6B8CC86AL, 0x73A9376DL, 0x2ABC1412L, 0x1A2E0BD1L
    )
    // final mix after CntDag loops for seed = 0xFD5873285FEC678B and mix initialized on it with fill_mix
    val mix_sample_1 = Array[Long](
      0xC720306CL, 0x22C33A28L, 0x7E1BB0AEL, 0x68467BBL,  0x60D5CBDBL, 0x937BA8DDL, 0x23B08626L, 0x9C87350DL, 0x6D459A68L, 0xF2BEEE66L, 0xA0A8D875L, 0xBB54F557L, 0x4B373596L, 0xD28DDFD4L, 0x90D951E7L, 0xADB45ACDL, 0xBA72AD45L, 0xA83B402EL, 0x8CE3CE58L, 0xDD48A893L, 0x5FE21AF5L, 0x5428605EL, 0x3D953413L, 0x2608323EL, 0x4E21045AL, 0x98168C85L, 0xF0737D75L, 0xCBCBB8F4L, 0xFD4BA405L, 0x46FFF92EL, 0x2F633801L, 0xDF20E03EL,
      0xA4E9B4A8L, 0x96C43D91L, 0x23A4D578L, 0xF46AC01BL, 0xB27E860BL, 0xCE179132L, 0x5107C7CL,  0x5908629L,  0xD7F6FE84L, 0xC870B55BL, 0xEDEA2348L, 0x45F0CD0L,  0xCACDCB7L,  0x972F7C4EL, 0x722E220AL, 0xDE966497L, 0xD694F65DL, 0xFA5920D0L, 0xA64FAFB6L, 0x387A0057L, 0x427C2C9FL, 0xC1F1F609L, 0x248B8816L, 0xEBCC0E1DL, 0xDCA14E27L, 0x27CA57DFL, 0x46677A15L, 0xF351BAE1L, 0xB6EF4B9EL, 0x7A667322L, 0x2FC91925L, 0x56D684E6L,
      0x95C3D961L, 0x450B15F6L, 0x533B745DL, 0x76F0028AL, 0xF3693A5L,  0x1CA8ED09L, 0xD84090CCL, 0xB41333BAL, 0x472FACEEL, 0x59BD4158L, 0xD08E51CDL, 0x11B6490CL, 0x45BBF20BL, 0x3ADE6985L, 0xD3CE85C8L, 0x540001E6L, 0x9B879F23L, 0x4BEDCC9EL, 0x4B9CBA92L, 0x5EEB4939L, 0xDBFDB211L, 0x4615643DL, 0xA1DB5E4CL, 0x2C436692L, 0xF745801AL, 0xFB63B3B9L, 0xA537A7CFL, 0x849D4DDL,  0x168F1B2EL, 0xB768F6C9L, 0xFB3A0EFEL, 0x53CB4830L,
      0x89A4B2FL,  0xCBE70245L, 0xEA48C498L, 0xED8DF39BL, 0xCCA9215AL, 0xD0ED8959L, 0x5C94FE7L,  0x83C50D63L, 0xB2C1B88AL, 0xE802EDFL,  0x94B4E20BL, 0x130EE8D3L, 0x709935D5L, 0xDF462CB0L, 0xB567385EL, 0xB8BA3AA1L, 0x6B9D8BAL,  0xFDDEBF7FL, 0x61C87900L, 0x2ED1C53AL, 0x91E46511L, 0xC118A11EL, 0x1275CE69L, 0xC7E61730L, 0x13CAF02DL, 0xAF5FAA37L, 0x5D9EB282L, 0x5949515EL, 0xB18C2EEFL, 0xD2647EA3L, 0x5F3200EDL, 0x177FB506L,
      0xEC47C950L, 0x4715B72DL, 0x5FBB919AL, 0xD94FA3B4L, 0x3B6DE5F4L, 0x55F05A12L, 0x970ED300L, 0xBEA50DEEL, 0x8CA91AB8L, 0xDAFC8EC1L, 0x7D81502L,  0x4BD1456FL, 0xFC2A8258L, 0xB245E62DL, 0x1B30CC95L, 0xF5C69E0BL, 0x6EE83747L, 0x8C479FBL,  0x88425A68L, 0x95F43AEL,  0x6AEA9580L, 0x1B564F80L, 0x77920398L, 0x3EAD57BDL, 0x4D03E3A2L, 0xAF7C87B2L, 0x20ACDE81L, 0x5DA7EFAFL, 0x4D2A73F4L, 0xA3717DCDL, 0x85BA23F2L, 0xBD1F49DFL,
      0x53E76439L, 0x30E47262L, 0x6C3AAF45L, 0xDDF36997L, 0xF8FBA8E6L, 0xF6E0BE7AL, 0x3E557D63L, 0x1E13C763L, 0xDC975706L, 0xB2B799D4L, 0x25D68DBL,  0x618173DCL, 0xFB5A9561L, 0x9AA345FCL, 0x7E605F60L, 0x8137BE11L, 0x26C6CD48L, 0x3691AB92L, 0x92B42B20L, 0xB5E3217DL, 0x247FDC53L, 0xCA64F20DL, 0xA15911DFL, 0xB5661A1CL, 0xD8958B4FL, 0xFB6F6471L, 0x689C041AL, 0xA7847378L, 0xF0A1C1EBL, 0x9E1B79EFL, 0x5D935522L, 0x9CF5BF05L,
      0xF44F7D09L, 0x30418628L, 0x932F77D7L, 0xF6EBC49AL, 0x149D20E3L, 0x1BD690ECL, 0x33BF4D8EL, 0x8DFE2054L, 0x5C7368D4L, 0xAC8F1C8L,  0x6958782BL, 0xADBD9794L, 0xDDC9C596L, 0xF7AA916CL, 0xFD4A869CL, 0x90F50CA4L, 0xA12313AL,  0x9C8F4269L, 0x9AD8357EL, 0x12B2090FL, 0xBCFCA551L, 0x179C50F5L, 0x44F1913BL, 0xAF18D82AL, 0xC395DB73L, 0x25B18B88L, 0x28E14A93L, 0x4360B60CL, 0xCC4DB8B3L, 0x234BA963L, 0x83A31B8FL, 0x4652863CL,
      0x8EC02C2FL, 0x7B65883FL, 0x8995D0E2L, 0x62F11EACL, 0xAC780921L, 0x1ACE9310L, 0x6FA5658EL, 0xE16AB95BL, 0x311BCDA2L, 0x28F711BEL, 0xBB73BD12L, 0xBFC0EB34L, 0xB6A6719FL, 0x60269D8L,  0xB753F4F8L, 0xEB17DD02L, 0xA9FE181L,  0xF43E0CF0L, 0x43CCE41AL, 0xC12A2116L, 0x88627E71L, 0x312C4F7FL, 0xEF4D0E40L, 0x5D0B525CL, 0x639BBDEEL, 0xEE47FDA1L, 0x4190F6E2L, 0xA8907B57L, 0xF94E0AEEL, 0x386072B7L, 0xAB05B979L, 0x579A5721L,
      0x6C2A81D1L, 0xD8CBB9E6L, 0xC16CB087L, 0x46AEC970L, 0xDD313912L, 0x22164426L, 0xDA935B2EL, 0xB2DF8502L, 0xD04BBC0CL, 0xD68AEA55L, 0x7B6B3C0FL, 0xF7CEC3BFL, 0x91D86796L, 0x1A84FA77L, 0x7D97D410L, 0x960566EFL, 0x74A26057L, 0x728764CCL, 0xE8E0BD78L, 0x35D1BECBL, 0xF3674F33L, 0x78E89291L, 0x7691FD50L, 0xA6D52A2DL, 0x4A1E3E6AL, 0x6E349C24L, 0x235B8A90L, 0x71049026L, 0x9E879885L, 0x5B032A19L, 0xB82EA0ABL, 0x471FB689L,
      0x805A1D1EL, 0xBAB2FC9BL, 0x42BE8E27L, 0xAEE8104DL, 0xA02DC81BL, 0xC6CE55E3L, 0xCAFFD889L, 0xC30D440BL, 0x97A22ECL,  0x1464AC4DL, 0x4758B19L,  0x6843582EL, 0x6EA2255AL, 0x9C6891EBL, 0x76405011L, 0xFCC882C8L, 0x10AA9AEL,  0x1E730637L, 0x29E35964L, 0x8C6490C3L, 0xD527300AL, 0x38FB674L,  0x192B4309L, 0xA4D6BA66L, 0x3F424441L, 0x8686DB0AL, 0x6E3BF784L, 0x1EC45469L, 0xA11CCC0BL, 0xE940D4E3L, 0x13917320L, 0xF887883CL,
      0xAC371C96L, 0x184B742AL, 0xFB5CFDB9L, 0x31A35AD9L, 0x9CD16657L, 0xEDD45C8BL, 0x74A7C432L, 0x66DF2309L, 0x92079B72L, 0x9A31CC2BL, 0xF9DA652CL, 0x87B9BB28L, 0x97C0A362L, 0x91371EL,   0x90663B9L,  0x617CBC76L, 0x4CD22634L, 0xD9EFEB23L, 0xD67AE813L, 0xFBAB99ABL, 0xC446AA8FL, 0x3F69F249L, 0xD25C8C96L, 0xE86CEA8BL, 0x6ABBBF67L, 0xDAC633F8L, 0xEBE53D71L, 0x2E6DF919L, 0x5774BE8DL, 0x726FC003L, 0xA6935CEFL, 0x6377F5AFL,
      0x61B748F2L, 0xBCAE73E0L, 0x28542C4BL, 0x9322A1E3L, 0x8ABF01D3L, 0x9564E281L, 0x8C8F8F60L, 0x837CE7D2L, 0xB46CAECAL, 0xD969A2B8L, 0x68F1117EL, 0x8855E3EEL, 0x75A40C2EL, 0xFD4EFFACL, 0xBDBCC672L, 0x54E2CE5CL, 0xE22CC61L,  0x31900111L, 0x489AC074L, 0x6F002BFFL, 0xD45F2B55L, 0x23C792CEL, 0x88663914L, 0x4F39A9DCL, 0xE26F73A5L, 0x2EC63F0FL, 0x2477E0A0L, 0x6C181886L, 0xADEAA665L, 0xE064F51CL, 0x182D26E4L, 0x9E556E3L,
      0x103A3A9FL, 0x88EC8D96L, 0x31A634C6L, 0x26CD6F72L, 0xD17CBE28L, 0x4A96173DL, 0x8B68748FL, 0x250B8613L, 0xFB6ADB9CL, 0x8BC8ED35L, 0x6EC52AA9L, 0x880A06B4L, 0x68B3CE4FL, 0x60DCA30CL, 0x7920C524L, 0x1FBF4813L, 0x871ABD5FL, 0xE7DABEC2L, 0xC95E423FL, 0x670AABF8L, 0x1C47DB42L, 0xB0BC7438L, 0x66E39B90L, 0x58591D1CL, 0x81B4BBECL, 0x7911024CL, 0xFF339DCCL, 0xB33A0D33L, 0x79CC669FL, 0x70FDC2E0L, 0x623C07CBL, 0xAED9F8F9L,
      0x9FB54C04L, 0xBD5B9774L, 0x877A0B2EL, 0x22DAB724L, 0xB0FD4D75L, 0xEDAAAFD1L, 0x64B43049L, 0xFA4E8EA6L, 0x3A6E9532L, 0xDA0C0AC1L, 0x7EB36056L, 0xD9B9244EL, 0xE82DADC1L, 0xD8B6280AL, 0x2BBFEC5AL, 0x2220E91EL, 0x7FCE18DL,  0x854115A3L, 0xE96D2A24L, 0xCEFD2BD8L, 0x9C3AF762L, 0xB5C20CB2L, 0xCCC11F50L, 0xBBEFDE0L,  0x5962FC89L, 0xE3894773L, 0x33A728A0L, 0xEC49B3D1L, 0x728A7CC1L, 0x545794B9L, 0xCE7EE3DBL, 0xEAF29F1AL,
      0x667A8DE1L, 0xF3A0CA91L, 0xE4D03895L, 0x443C18EEL, 0x7B502668L, 0xDB1A172L,  0xBDD3EA9BL, 0xF3BA0069L, 0x3114C1AAL, 0xA4154970L, 0xC8F04562L, 0xB58396CL,  0xD4E7A4BL,  0xDD8341CFL, 0x29792331L, 0x212F2DE5L, 0xFDA3AFL,   0x2471F695L, 0x7AD39493L, 0xE93300AEL, 0x9199E83FL, 0x8529B750L, 0x14D89773L, 0xE4A5915BL, 0xD95767E2L, 0xDB41A7BBL, 0x7CDD8B3FL, 0xBC2DFFEL,  0xB63D4941L, 0xB93D42A0L, 0x519C7D58L, 0x821333BAL,
      0x843A6220L, 0x4533B2A4L, 0x85158F25L, 0xA12B9262L, 0xF6F3FE3L,  0xD8E54841L, 0xADB0C0D7L, 0x24CC75ACL, 0x3B1ADFA0L, 0x5F53E038L, 0x678360CL,  0xD4B2F3A7L, 0x52E35EF5L, 0xEC793156L, 0xF994F8E3L, 0xD72DA783L, 0xB1870531L, 0x35C3DAC7L, 0xAAE7197CL, 0xDCBB3C24L, 0x8874C0C6L, 0xB41C9DBFL, 0xA4F74044L, 0x6AE51C36L, 0x60FB06CEL, 0x9F3A9CAAL, 0x1E377A7L,  0x1E20384BL, 0x27E1613DL, 0xEA213813L, 0x81622BB3L, 0x7CCECF69L
    )

    val prog_pow_1 = new ProgPow(1, DagMode.Light)

    val prog_seed_0 = Array[Long](0L, 0L)
    val mix_0 = Array.fill(ProgPow.Lanes)(Array.fill[Long](ProgPow.Regs)(0L))
    val kissMix_0 = ProgPow.progPowInit(prog_seed_0)

    for(i <- 0 until ProgPow.CntDag)
      prog_pow_1.loop(i.toLong, mix_0, kissMix_0.copy())

    assert(mix_0.flatten.sameElements(mix_sample_0))

    val prog_seed_1 = Array[Long](0x5FEC678BL, 0xFD587328L) // 0xFD5873285FEC678B
    val mix_1 = (for (lane_id <- 0 until ProgPow.Lanes) yield {
      ProgPow.fill_mix(prog_seed_1, lane_id.toLong)
    }).toArray
    val kissMix_1 = ProgPow.progPowInit(prog_seed_1)

    for(i <- 0 until ProgPow.CntDag)
      prog_pow_1.loop(i.toLong, mix_1, kissMix_1.copy())

    assert(mix_1.flatten.sameElements(mix_sample_1))
  }

  test("progPowHash"){

    val progPow0 = new ProgPow(0, testMode)

    assert(
      progPow0.hash(
        Array[Long](0L, 0L),
        TestUtils.parseNonce("0000000000000000"),
        Hash32(TestUtils.parseHexString("0000000000000000000000000000000000000000000000000000000000000000"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("faeb1be51075b03a4ff44b335067951ead07a3b078539ace76fd56fc410557a3")
      )
    )

    assert(
      progPow0.hash(
        Array[Long](0L, 0L),
        TestUtils.parseNonce("0000000006ff2c47"),
        Hash32(TestUtils.parseHexString("63155f732f2bf556967f906155b510c917e48e99685ead76ea83f4eca03ab12b"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("c789c1180f890ec555ff42042913465481e8e6bc512cb981e1c1108dc3f2227d")
      )
    )

    assert(
      progPow0.hash(
        Array[Long](1L, 0L),
        TestUtils.parseNonce("00000000076e482e"),
        Hash32(TestUtils.parseHexString("9e7248f20914913a73d80a70174c331b1d34f260535ac3631d770e656b5dd922"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("c7340542c2a06b3a7dc7222635f7cd402abf8b528ae971ddac6bbe2b0c7cb518")
      )
    )

    assert(
      progPow0.hash(
        Array[Long](1L, 0L),
        TestUtils.parseNonce("000000003917afab"),
        Hash32(TestUtils.parseHexString("de37e1824c86d35d154cf65a88de6d9286aec4f7f10c3fc9f0fa1bcc2687188d"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("f5e60b2c5bfddd136167a30cbc3c8dbdbd15a512257dee7964e0bc6daa9f8ba7")
      )
    )

    assert(
      progPow0.hash(
        Array[Long](599L, 0L),
        TestUtils.parseNonce("005d409dbc23a62a"),
        Hash32(TestUtils.parseHexString("ac7b55e801511b77e11d52e9599206101550144525b5679f2dab19386f23dcce"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("07393d15805eb08ee6fc6cb3ad4ad1010533bd0ff92d6006850246829f18fd6e")
      )
    )

    assert(
      progPow0.hash(
        Array[Long](599L, 0L),
        TestUtils.parseNonce("005db5fa4c2a3d03"),
        Hash32(TestUtils.parseHexString("e43d7e0bdc8a4a3f6e291a5ed790b9fa1a0948a2b9e33c844888690847de19f5"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("7551bddf977491da2f6cfc1679299544b23483e8f8ee0931c4c16a796558a0b8")
      )
    )

    val progPow1 = new ProgPow(1, testMode)

    assert(
      progPow1.hash(
        Array[Long](600L, 0L),
        TestUtils.parseNonce("123456789abcdef0"),
        Hash32(TestUtils.parseHexString("ffeeddccbbaa9988776655443322110000112233445566778899aabbccddeeff"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("11f19805c58ab46610ff9c719dcf0a5f18fa2f1605798eef770c47219274767d")
      )
    )

    assert(
      progPow1.hash(
        Array[Long](600L, 0L),
        TestUtils.parseNonce("005db8607994ff30"),
        Hash32(TestUtils.parseHexString("d34519f72c97cae8892c277776259db3320820cb5279a299d0ef1e155e5c6454"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("f1c2c7c32266af9635462e6ce1c98ebe4e7e3ecab7a38aaabfbf2e731e0fbff4")
      )
    )

    assert(
      progPow1.hash(
        Array[Long](600L, 0L),
        TestUtils.parseNonce("005e2e215a8ca2e7"),
        Hash32(TestUtils.parseHexString("8b6ce5da0b06d18db7bd8492d9e5717f8b53e7e098d9fef7886d58a6e913ef64"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("57fe6a9fbf920b4e91deeb66cb0efa971e08229d1a160330e08da54af0689add")
      )
    )

    assert(
      progPow1.hash(
        Array[Long](601L, 0L),
        TestUtils.parseNonce("005e30899481055e"),
        Hash32(TestUtils.parseHexString("c2c46173481b9ced61123d2e293b42ede5a1b323210eb2a684df0874ffe09047"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("ba30c61cc5a2c74a5ecaf505965140a08f24a296d687e78720f0b48baf712f2d")
      )
    )

    assert(
      progPow1.hash(
        Array[Long](601L, 0L),
        TestUtils.parseNonce("005ea6aef136f88b"),
        Hash32(TestUtils.parseHexString("ea42197eb2ba79c63cb5e655b8b1f612c5f08aae1a49ff236795a3516d87bc71"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("cfd5e46048cd133d40f261fe8704e51d3f497fc14203ac6a9ef6a0841780b1cd")
      )
    )

    assert(
      progPow1.hash(
        Array[Long](1199L, 0L),
        TestUtils.parseNonce("02ebe0503bd7b1da"),
        Hash32(TestUtils.parseHexString("49e15ba4bf501ce8fe8876101c808e24c69a859be15de554bf85dbc095491bd6"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("21511fbaa31fb9f5fc4998a754e97b3083a866f4de86fa7500a633346f56d773")
      )
    )

    assert(
      progPow1.hash(
        Array[Long](1199L, 0L),
        TestUtils.parseNonce("02edb6275bd221e3"),
        Hash32(TestUtils.parseHexString("f5c50ba5c0d6210ddb16250ec3efda178de857b2b1703d8d5403bd0f848e19cf"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("653eda37d337e39d311d22be9bbd3458d3abee4e643bee4a7280a6d08106ef98")
      )
    )

    val progPow333 = new ProgPow(333, testMode)

    assert(
      progPow333.hash(
        Array[Long](200000L, 0L),
        TestUtils.parseNonce("005e30899481055e"),
        Hash32(TestUtils.parseHexString("efda178de857b2b1703d8d5403bd0f848e19cff5c50ba5c0d6210ddb16250ec3"))
      ).uint32s.sameElements(
        TestUtils.parseHexString("b2403f56c426177856eaf0eedd707c86ae78a432b9169c3689a67058fcf2a848")
      )
    )
  }
}